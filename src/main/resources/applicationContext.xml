<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<!-- 线程执行器配置，用于任务注册 -->

	<!-- WAS部署如果连不上以下地址，会报错，所以先注释 -->
	<!-- <jaxws:client id="client" serviceClass="com.hgsoft.clearInterface.serviceInterface.ITollService" 
		address="http://192.168.1.101:8080/UCSS/webservice/tollService" /> <jaxws:client 
		id="client1" serviceClass="com.hgsoft.clearInterface.serviceInterface.ITransFeeService" 
		address="http://192.168.1.101:8080/UCSS/webservice/transFeeService" /> <jaxws:client 
		id="client2" serviceClass="com.hgsoft.clearInterface.serviceInterface.IOrderService" 
		address="http://192.168.1.101:8080/UCSS/webservice/orderService" /> -->

	<context:annotation-config />
	<context:component-scan base-package="com.hgsoft" />
	
	<aop:aspectj-autoproxy proxy-target-class="true"/>

	<!--开启这个配置，spring才能识别@Scheduled注解-->
	<!--<task:annotation-driven/>-->

	<!-- 配置文件注入 -->
	<bean id="propertyConfigurer"
		  class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:driver.properties</value>
				<value>classpath:rmi.properties</value>
				<value>classpath:mq.properties</value>
			</list>
		</property>
	</bean>
	<bean class="com.hgsoft.utils.PerformanceMonitor">
		<property name="warnTime" value="3000" /><!--毫秒-->
	</bean>
	<!-- 初始化MQ -->
	<bean id="mqServerObject" class="com.hgsoft.mq.util.MQServerObject">
		<property name="ip" value="${mq.ip}" />
		<property name="port" value="${mq.port}" />
		<property name="user" value="${mq.user}" />
		<property name="password" value="${mq.password}" />
	</bean>
	<!-- 初始化urlUtil -->
	<!-- <bean id="urlUtils" class="com.hgsoft.utils.UrlUtils">
		<property name="etctolluser" value="${etctolluser}" />
		<property name="omsuser" value="${omsuser}" />
	</bean> -->
	<!-- 解决RMI端口限制引起的连接不上问题 -->
	<bean id="registry" class="org.springframework.remoting.rmi.RmiRegistryFactoryBean">
	       <property name="port" value="${rmiPort}"/>
	</bean>

	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init"
		  destroy-method="close">
		<!--<property name="poolName" value="jdbcPool" />-->
		<property name="driverClassName" value="${jdbc.driverClass}" />
		<property name="url" value="${jdbc.jdbcUrl}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		
		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		
		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${jdbc.maxWait}" />
		
		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis" value="${jdbc.timeBetweenEvictionRunsMillis}" />
		
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${jdbc.minEvictableIdleTimeMillis}" />
		
		<property name="validationQuery" value="select 1 from dual" />
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}" />
		<property name="testOnBorrow" value="${jdbc.testOnBorrow}" />
		<property name="testOnReturn" value="${jdbc.testOnReturn}" />
		
		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements" value="${jdbc.poolPreparedStatements}" />
		<property name="maxPoolPreparedStatementPerConnectionSize" value="${jdbc.maxPoolPreparedStatementPerConnectionSize}" />
		
		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
		
		<!--ps:通常来说，只需要修改initialSize、minIdle、maxActive。
        如果用Oracle，则把poolPreparedStatements配置为true，
        mysql可以配置为false。分库分表较多的数据库，建议配置为false。-->
		
		<!--&lt;!&ndash; 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 &ndash;&gt;
		<property name="connectionTimeout" value="30000" />
		&lt;!&ndash; 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 &ndash;&gt;
		<property name="idleTimeout" value="600000" />
		&lt;!&ndash; 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';） &ndash;&gt;
		<property name="maxLifetime" value="1200000" />
		&lt;!&ndash; 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) &ndash;&gt;
		<property name="maximumPoolSize" value="${jdbc.maximumPoolSize}" />
		<property name="minimumIdle" value="${jdbc.minimumIdle}" />
		
		<property name="validationTimeout" value="5000" />
		<property name="leakDetectionThreshold" value="60000"/>-->
	</bean>
	<!--<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>-->

	<!-- <bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown"> 
		<property name="driverClassName" value="${db.driverClass}" /> 无需指定，除非系统无法自动识别 
		<property name="poolName" value="jdbcPool" /> <property name="jdbcUrl" value="${jdbc.jdbcUrl}"/> 
		<property name="username" value="${jdbc.username}" /> <property name="password" 
		value="${jdbc.password}" /> 连接只读数据库时配置为true， 保证安全 <property name="readOnly" 
		value="false" /> 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 
		<property name="connectionTimeout" value="30000" /> 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 
		<property name="idleTimeout" value="600000" /> 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
		wait_timeout参数（show variables like '%timeout%';） <property name="maxLifetime" 
		value="1200000" /> 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) 
		<property name="maximumPoolSize" value="15" /> <property name="minimumIdle" 
		value="5" /> </bean> -->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>


	<!-- <bean id="hikariConfigEtcTolling" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="etctolljdbcPool" />
		<property name="driverClassName" value="${jdbc.etcDriverClass}" />
		<property name="jdbcUrl" value="${jdbc.etcJdbcUrl}" />
		<property name="username" value="${jdbc.etcUsername}" />
		<property name="password" value="${jdbc.etcPassword}" />
		等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
		<property name="connectionTimeout" value="30000" />
		一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
		<property name="idleTimeout" value="600000" />
		一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';）
		<property name="maxLifetime" value="1200000" />
		连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
		<property name="maximumPoolSize" value="${jdbc.clearMaximumPoolSize}" />
		<property name="minimumIdle" value="${jdbc.clearMinimumIdle}" />
	</bean> -->



	<!-- <bean id="hikariConfigClear" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="clearjdbcPool" />
		<property name="driverClassName" value="${jdbc.clearDriverClass}" />
		<property name="jdbcUrl" value="${jdbc.clearJdbcUrl}" />
		<property name="username" value="${jdbc.clearUsername}" />
		<property name="password" value="${jdbc.clearPassword}" />
		等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
		<property name="connectionTimeout" value="30000" />
		一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
		<property name="idleTimeout" value="600000" />
		一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL 
			wait_timeout参数（show variables like '%timeout%';）
		<property name="maxLifetime" value="1200000" />
		连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
		<property name="maximumPoolSize" value="${jdbc.etcMaximumPoolSize}" />
		<property name="minimumIdle" value="${jdbc.etcMinimumIdle}" />
	</bean> -->

	<!-- <bean id="hikariConfigOms" class="com.zaxxer.hikari.HikariConfig">
		<property name="poolName" value="omsjdbcPool" />
		<property name="driverClassName" value="${jdbc.omsDriverClass}" />
		<property name="jdbcUrl" value="${jdbc.omsJdbcUrl}" />
		<property name="username" value="${jdbc.omsUsername}" />
		<property name="password" value="${jdbc.omsPassword}" />
		等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒
		<property name="connectionTimeout" value="30000" />
		一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟
		<property name="idleTimeout" value="600000" />
		一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL
			wait_timeout参数（show variables like '%timeout%';）
		<property name="maxLifetime" value="1200000" />
		连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count)
		<property name="maximumPoolSize" value="${jdbc.omsMaximumPoolSize}" />
		<property name="minimumIdle" value="${jdbc.omsMinimumIdle}" />
	</bean> -->

	<!-- <bean id="etcTollingDataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfigEtcTolling" />
	</bean> -->

	<bean id="etcTollingJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>

	<!-- <bean id="clearDataSource" class="com.zaxxer.hikari.HikariDataSource"
		destroy-method="close">
		<constructor-arg ref="hikariConfigClear" />
	</bean> -->

	<bean id="clearJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" /><!-- 获取数据源连接池配置 -->
		</property>
	</bean>

	<!-- <bean id="omsDataSource" class="com.zaxxer.hikari.HikariDataSource"
		  destroy-method="close">
		<constructor-arg ref="hikariConfigOms" />
	</bean> -->

	<bean id="omsJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" /><!-- 获取数据源连接池配置 -->
		</property>
	</bean>


	<bean id="transactionManager"
		  class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>



	<!-- <bean id="clearTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> 
		<property name="dataSource" ref="clearDataSource" /> </bean> -->


	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="batch*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="add*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>
			<tx:method name="omsInterface" propagation="NOT_SUPPORTED" />
			<tx:method name="tagInterface" propagation="NOT_SUPPORTED" />
			<tx:method name="*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>

	<!-- <aop:config proxy-target-class="true"> -->
	<aop:config>
		<aop:pointcut id="transactionPointCut"
					  expression="execution(* com.hgsoft.*.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointCut"
					 advice-ref="txAdvice" />
	</aop:config>
	<!--<tx:annotation-driven transaction-manager="transactionManager" /> -->
	
	<!-- 生成报表数据定时任务配置文件 -->
	<!-- <import resource="applicationContext-quartz-report.xml" /> -->

	<import resource="csmsService.xml" />
	<import resource="acmsService.xml" />
	<import resource="associateService.xml" />
	<import resource="agentService.xml" />
	<import resource="onlineService.xml" />
	<import resource="appService.xml" />
	<import resource="ivrService.xml" />
	<import resource="bankNettyService.xml" />
	<import resource="macaoService.xml" />
 	<import resource="quartzService.xml" />
	<import resource="timerTaskService.xml" />
	<import resource="airRechargeService.xml" />
	<import resource="testRmi.xml" />

</beans>